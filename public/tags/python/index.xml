<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Joseph Rex&#39;s blog - Exploring Software, Food recipes, and Design</title>
    <link>https://josephrex.me/tags/python/</link>
    <description>Recent content in Python on Joseph Rex&#39;s blog - Exploring Software, Food recipes, and Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Dec 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://josephrex.me/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Symmetric Encryption in Python</title>
      <link>https://josephrex.me/symmetric-encryption-in-python/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/symmetric-encryption-in-python/</guid>
      <description>&lt;p&gt;{% image encryption-1.jpeg class=&amp;ldquo;head-image&amp;rdquo; alt=&amp;ldquo;encryption&amp;rdquo; %}&lt;/p&gt;

&lt;p&gt;In the middle of a project I&amp;rsquo;m presently working on, I needed to make use of a Symmetric encryption based on the workflow of my software. A key is required by users to encrypt data and the same key will be needed to decrypt data. My first thoughts were on PyCrypto so I went ahead doing this&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;Crypto.Cipher&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;AES&lt;/span&gt;
&lt;span style=&#34;color: #5bc4bf&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #fec418&#34;&gt;Crypto&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;Random&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;text&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;The quick brown fox jumped over the dog&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;iv&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;Random&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;new()&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;read(AES&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;block_size)&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;cipher&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;AES&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;new(key,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;AES&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;MODE_CFB,&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;iv)&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;ctext&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;iv&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;cipher&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;encrypt(text)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was totally fine but when I tried decrypting the ctext data, I got something entirely different from what my input was.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;decrypted&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;cipher&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;decrypt(ctext)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Strange behaviour from MODE_CFB made me try MODE_CBC. Just the exact same way, I went ahead to just change to MODE_CBC
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>There shall be binaries</title>
      <link>https://josephrex.me/there-shall-be-binaries/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/there-shall-be-binaries/</guid>
      <description>&lt;figure&gt;
{% image pyuic-binaries.png alt=&#34;pyuic binary&#34; class=&#34;image image--wide&#34; %}
&lt;/figure&gt;

&lt;p&gt;There comes a point when your program needs to be distributed to other users. You don&amp;rsquo;t want to always have to give every intended user of your program a list of modules or libraries to be installed before they can use your software.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found myself developing software with python a lot lately and usually, I like people to check them out. Most times, my target users are Windows OS users. I built my programs but packing them into binaries became the pain in the neck for me.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding Resource files to your Qt designer project and using pyrcc with python</title>
      <link>https://josephrex.me/adding-resource-files-to-your-qt-designer-project-and-using-pyrcc-with-python/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/adding-resource-files-to-your-qt-designer-project-and-using-pyrcc-with-python/</guid>
      <description>&lt;figure&gt;
{% image glossy-gui.jpg class=&#34;image image--wide&#34; alt=&#34;Glossy GUI&#34; %}
&lt;/figure&gt;

&lt;p&gt;I&amp;rsquo;ve planned writing on this for long but I&amp;rsquo;ve just been so busy. When I started building GUI programs with Qt designer, this was a big challenge for me for a while but somehow I figured it out on my own.&lt;/p&gt;

&lt;p&gt;When creating a GUI project in Qt designer, you need images on some parts of your interface. Qt designer allows you add images that have been included in your resource files. My first pain was &amp;ldquo;How the heck do I add images to this resource file and where the heck is it?&amp;rdquo;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting started with GUI development in Python</title>
      <link>https://josephrex.me/getting-started-with-gui-development-in-python/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/getting-started-with-gui-development-in-python/</guid>
      <description>&lt;figure&gt;
{% image z_design.jpg class=&#34;image&#34; alt=&#34;z_design&#34; %}
&lt;/figure&gt;

&lt;p&gt;Most people that are fond of Windows operating system will always root for graphical desktop applications (GUI) over command line (CLI) programs. Since after DOS, windows operating systems have been known to use simple and user friendly GUI. This is one of the reasons why they have made a lot of customers around the world.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>