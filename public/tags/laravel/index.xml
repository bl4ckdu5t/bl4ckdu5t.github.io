<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laravel on Joseph Rex&#39;s blog - Exploring Software, Food recipes, and Design</title>
    <link>https://josephrex.me/tags/laravel/</link>
    <description>Recent content in Laravel on Joseph Rex&#39;s blog - Exploring Software, Food recipes, and Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Dec 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://josephrex.me/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Multiple tables for authentication in laravel</title>
      <link>https://josephrex.me/using-multiple-tables-for-authentication-in-laravel/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/using-multiple-tables-for-authentication-in-laravel/</guid>
      <description>&lt;p&gt;Laravel provides a good authentication handler with the Auth class. To authenticate a user attempting to log in, we use the attempt method like so:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #776e71&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color: #815ba4&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;Auth&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;attempt&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ef6155&#34;&gt;$email&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ef6155&#34;&gt;$password&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;)))&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #815ba4&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;Redirect&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;intended&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;dashboard&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #776e71&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s just as it is &lt;a href=&#34;http://laravel.com/docs/4.2/security#authenticating-users&#34; target=&#34;_blank&#34;&gt;in the docs&lt;/a&gt;. But this checks against the users table which is fine because most apps have a users table for authentication. I&amp;rsquo;ve never had a need to build something requiring more tables for authentication but I had someone requesting for a solution to this and I was really interested in getting this to work.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using the laravel console</title>
      <link>https://josephrex.me/using-the-laravel-console/</link>
      <pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/using-the-laravel-console/</guid>
      <description>&lt;p&gt;{% image laravel-console.png class=&amp;ldquo;head-image&amp;rdquo; alt=&amp;ldquo;laravel console&amp;rdquo; %}&lt;/p&gt;

&lt;p&gt;I have always loved consoles. I can&amp;rsquo;t do without them as they make life easy for me in so many ways. I talked about &lt;a href=&#34;http://josephrex.me/butterfly-and-fish/&#34; title=&#34;Butterfly and Fish&#34;&gt;fish and butterfly in an old blog post &lt;/a&gt;as I use them often. I also use the awesome &lt;a href=&#34;http://phpsh.org/&#34; target=&#34;_blank&#34;&gt;phpsh&lt;/a&gt; because it is the best way for me to test php code on the go.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Some useful links for a Laravel developer</title>
      <link>https://josephrex.me/some-useful-links-for-a-laravel-developer/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/some-useful-links-for-a-laravel-developer/</guid>
      <description>&lt;p&gt;{% image LaravelModules__1417844148_41.206.11.5.jpg class=&amp;ldquo;head-image&amp;rdquo; alt=&amp;ldquo;Laravel background&amp;rdquo; %}&lt;/p&gt;

&lt;p&gt;These are some links you will find useful as a Laravel developer.&lt;/p&gt;

&lt;p&gt;Laravel Pastebin: &lt;a href=&#34;http://laravel.io/bin&#34;&gt;http://laravel.io/bin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Laravel Forum: &lt;a href=&#34;http://laravel.io/forum&#34;&gt;http://laravel.io/forum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Forum archive: &lt;a href=&#34;http://forumsarchive.laravel.io&#34;&gt;http://forumsarchive.laravel.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Laravel Jobs: &lt;a href=&#34;http://larajobs.com&#34;&gt;https://larajobs.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Laravel Podcast:Â &lt;a href=&#34;http://www.buzzsprout.com/11908&#34;&gt;http://www.buzzsprout.com/11908&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding a break statement to laravel4 blade templating</title>
      <link>https://josephrex.me/adding-a-break-statement-to-laravel4-blade-templating/</link>
      <pubDate>Fri, 05 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/adding-a-break-statement-to-laravel4-blade-templating/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been quite long since I had to develop with laravel4 but in my active days, I leveraged blade templating in my views. View files have less logic but then we have to perform simple loop operations and conditional statements. Blade provides @if, @endif, @foreach, @endforeach. Well, I wasn&amp;rsquo;t satisfied with that because I had a lot cases to break my loop. This was my solution&lt;/p&gt;

&lt;p&gt;If you have a helpers file that extends start/global.php you can add the following to extend blade
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing dynamic drop down / dependent list in laravel4</title>
      <link>https://josephrex.me/implementing-dynamic-drop-down-or-dependent-list-in-laravel4/</link>
      <pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/implementing-dynamic-drop-down-or-dependent-list-in-laravel4/</guid>
      <description>&lt;figure&gt;
{% image drop-down-menu.jpg class=&#34;image image--wide&#34; alt=&#34;drop-down-menu&#34; %}
&lt;/figure&gt;

&lt;p&gt;When I used procedural PHP for most of my projects, I found myself needing what I referred to as a dependent list. These days I hear it being referred to as dynamic drop down more often. After looking around, a friend gave this solution to me.&lt;/p&gt;

&lt;p&gt;All examples here will rely on the DDL database schema here:
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Good son, bad father: I&#39;m leaving PHP but I love Laravel</title>
      <link>https://josephrex.me/good-son-bad-father-im-leaving-php-but-i-love-laravel/</link>
      <pubDate>Tue, 12 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/good-son-bad-father-im-leaving-php-but-i-love-laravel/</guid>
      <description>&lt;p&gt;{% image dad-and-son.png alt=&amp;ldquo;Dad and Son&amp;rdquo; class=&amp;ldquo;head-image&amp;rdquo; %}&lt;/p&gt;

&lt;p&gt;PHP has a really shallow learning curve. It&amp;rsquo;s easy for a 8 year old to pick it up and start messing around with it. This is good and I love it about Python as well. However, PHP has been known to have a lot of flaws, one of the major reasons being because it was not built as a functional programming language but rather, just a Hypertext pre-processor. It was meant to just automate the behaviour of HTML. Around 2005, OOP was introduced to PHP and it made PHP developers feel among the big boys of the web.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Beanstalkd and Supervisor to handle queues in Laravel4</title>
      <link>https://josephrex.me/using-beanstalkd-and-supervisor-to-handle-queues-in-laravel4/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/using-beanstalkd-and-supervisor-to-handle-queues-in-laravel4/</guid>
      <description>&lt;p&gt;{% image security_lights.jpg class=&amp;ldquo;head-image&amp;rdquo; alt=&amp;ldquo;security lights&amp;rdquo; %}
When performing some tasks that take time with your web application, you usually don&amp;rsquo;t want to keep your users waiting for a better user experience.&lt;/p&gt;

&lt;p&gt;Taking email sending for an example, it takes about a minute to two for an email to be sent with your web app. Do you really want to keep your non geeky application users staring at a screen for that long, just watching an ajax image loader spin, or just waiting to get a response that the task has been completed. No, I don&amp;rsquo;t think so.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Frontend assets the right way on Laravel and other Frameworks:Bower</title>
      <link>https://josephrex.me/using-frontend-assets-the-right-way-on-laravel-and-other-frameworksbower/</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/using-frontend-assets-the-right-way-on-laravel-and-other-frameworksbower/</guid>
      <description>&lt;p&gt;Non laravel users are getting intimidated with the unending trend of Laravel discussions everywhere theyÂ go :)&lt;/p&gt;

&lt;p&gt;Laravel is an awesome back-end framework that has attracted a lot of PHP developers including the Professionals like Jeffrey Way who makes awesome videos on &lt;a href=&#34;https://www.debian.org/News/2014/20140424&#34;&gt;Laracast&lt;/a&gt;Â (Netflix for Developers).
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a helper file for your Laravel 4 application</title>
      <link>https://josephrex.me/creating-a-helper-file-for-your-laravel-4-application/</link>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/creating-a-helper-file-for-your-laravel-4-application/</guid>
      <description>&lt;p&gt;At some point we will like to define our own unique functions even with all the awesome packages and inbuilt functions of laravel. Coming from a framework like codeigniter, you may expect to find a helpers directory in laravel but there&amp;rsquo;s no such thing. To create your Laravel helper, you can open the &lt;code&gt;app/start/global.php&lt;/code&gt; file and add any new functions you want at the bottom.&lt;br /&gt;
Doing this however will mess up your global.php code. The best approach to this from my perspective will be to require a separate file from the bottom of that file and add all your functions to the new file. In my case, I decided to create a helpers.php file in my app directory and then include this line
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Uploading files in Laravel 4</title>
      <link>https://josephrex.me/uploading-files-in-laravel-4/</link>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/uploading-files-in-laravel-4/</guid>
      <description>&lt;p&gt;Below is an example of an HTML form written in blade template and laravel illuminate form builder&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{% raw %}
{{ Form::open([&amp;#39;action&amp;#39; =&amp;gt; &amp;#39;method@controller&amp;#39;,&amp;#39;file&amp;#39; =&amp;gt; &amp;#39;true&amp;#39;]) }}
{{ Form::input(&amp;#39;text&amp;#39;,&amp;#39;name&amp;#39;) }}
{{ Form::input(&amp;#39;file&amp;#39;,&amp;#39;file&amp;#39;) }}
{{ Form::submit(&amp;#39;Enter&amp;#39;) }}

{{ Form::close() }}
{% endraw %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It says I have a file with the name values as file. To handle this upload, you can use the controller method used for handling the entire form and have the following inside it
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>