<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Joseph Rex&#39;s blog - Exploring Software, Food recipes, and Design</title>
    <link>https://josephrex.me/tags/javascript/</link>
    <description>Recent content in Javascript on Joseph Rex&#39;s blog - Exploring Software, Food recipes, and Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Nov 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://josephrex.me/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing dynamic drop down / dependent list in laravel4</title>
      <link>https://josephrex.me/implementing-dynamic-drop-down-or-dependent-list-in-laravel4/</link>
      <pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/implementing-dynamic-drop-down-or-dependent-list-in-laravel4/</guid>
      <description>&lt;figure&gt;
{% image drop-down-menu.jpg class=&#34;image image--wide&#34; alt=&#34;drop-down-menu&#34; %}
&lt;/figure&gt;

&lt;p&gt;When I used procedural PHP for most of my projects, I found myself needing what I referred to as a dependent list. These days I hear it being referred to as dynamic drop down more often. After looking around, a friend gave this solution to me.&lt;/p&gt;

&lt;p&gt;All examples here will rely on the DDL database schema here:
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>.attr() is not what you want, use .prop()</title>
      <link>https://josephrex.me/attr-is-not-what-you-want-use-prop/</link>
      <pubDate>Thu, 26 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/attr-is-not-what-you-want-use-prop/</guid>
      <description>&lt;p&gt;JavaScript is boss at what it does by helping us manipulate the DOM. jQuery has helped JS starters and also PROs that want to get work done in time. The .attr() function is meant to get the attributes of a selected node in the DOM. Starting with jQuery, I felt it was totally ok to use .attr() not just because it was the function I felt I wanted, but it sounded semantically ok with the task I want to achieve. Thinking of it in a simple way, &amp;ldquo;attr&amp;rdquo; looks like an abbreviation of &amp;ldquo;attribute&amp;rdquo; and what I want to do is access the contents of my HTML element attribute. Used it like this for a while and found out it didn&amp;rsquo;t work as perfect as I expected till I discovered I shouldn&amp;rsquo;t have been doing it this way. .attr() accesses defaultValue (initial value) of an element&amp;rsquo;s attribute which means if I have a mark-up like this
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Accessing non-specific javascript object properties</title>
      <link>https://josephrex.me/accessing-non-specific-javascript-objects/</link>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/accessing-non-specific-javascript-objects/</guid>
      <description>&lt;p&gt;If you are a regular JavaScript programmer, then you know that when you see an object like this&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e7e9db&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;gender&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;male&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The best way to access the values of the object data will be to have it this way&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #776e71&#34;&gt;//returns John Doe&lt;/span&gt;
&lt;span style=&#34;color: #06b6ef&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;gender&lt;/span&gt; &lt;span style=&#34;color: #776e71&#34;&gt;//returns male&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While working with Laravel for my back-end programming on my current project, I had cases where I received JSONÂ objects as validation messages. The json being received is something like
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sending files over Ajax requests with jQuery</title>
      <link>https://josephrex.me/sending-files-over-ajax-requests-with-jquery/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/sending-files-over-ajax-requests-with-jquery/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve been writing &lt;a href=&#34;http://jquery.com&#34;&gt;jQuery,&lt;/a&gt; you&amp;rsquo;re probably fond of writing your code this way when submitting forms with ajax&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #2f1e2e&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;){&lt;/span&gt;
  &lt;span style=&#34;color: #06b6ef&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;preventDefault&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #815ba4&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #5bc4bf&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;serialize&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #06b6ef&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;ajax&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;({&lt;/span&gt;
    &lt;span style=&#34;color: #06b6ef&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #06b6ef&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #06b6ef&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color: #5bc4bf&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #06b6ef&#34;&gt;yourUrl&lt;/span&gt;
  &lt;span style=&#34;color: #e7e9db&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;done&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;){&lt;/span&gt;
    &lt;span style=&#34;color: #06b6ef&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #e7e9db&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;fail&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #815ba4&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color: #06b6ef&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #06b6ef&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #48b685&#34;&gt;&amp;quot;It failed&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e7e9db&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #e7e9db&#34;&gt;});&lt;/span&gt;

&lt;span style=&#34;color: #e7e9db&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and for those using older versions of jQuery or haven&amp;rsquo;t realized the essence of promises, it should be something like this you have:
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>