<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on Joseph Rex&#39;s blog - Exploring Software, Food recipes, and Design</title>
    <link>https://josephrex.me/tags/rails/</link>
    <description>Recent content in Rails on Joseph Rex&#39;s blog - Exploring Software, Food recipes, and Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://josephrex.me/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Frontend asset management in rails applications</title>
      <link>https://josephrex.me/frontend-asset-management-in-rails-applications/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/frontend-asset-management-in-rails-applications/</guid>
      <description>&lt;p&gt;In rails planet it&amp;rsquo;s easy to assume that asset management is at its best with the assets pipeline it provides which includes sprockets for simple requires. Sprockets is great but could be better with a properly structured application.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting up uploads with paperclip and fog in rails applications</title>
      <link>https://josephrex.me/setting-up-uploads-with-paperclip-and-fog-in-rails-applications/</link>
      <pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/setting-up-uploads-with-paperclip-and-fog-in-rails-applications/</guid>
      <description>&lt;p&gt;Paperclip is a great gem and one of the most used gem for handling file attachment in rails applications. &lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave&#34;&gt;Carrierwave&lt;/a&gt; is another good choice. This article describes how to use it with the fog gem (a gem that helps you connect with almost any cloud service).
This article will use a Car model to handle scenarios of car image uploads.
Start by adding the necessary gems to your Gemfile
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Moving from sqlite3 to postgresql database for your rails project</title>
      <link>https://josephrex.me/moving-from-sqlite3-to-postgresql-database-for-your-rails-project/</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josephrex.me/moving-from-sqlite3-to-postgresql-database-for-your-rails-project/</guid>
      <description>&lt;p&gt;Rails uses sqlite3 by default on development. If you are not careful enough, you may get so comfortable with sqlite which I did. After a while, there will be a need to push the application to production and at this point, you wouldn&amp;rsquo;t want sqlite on your web server. I&amp;rsquo;m using heroku for my app and they stated &lt;a href=&#34;https://devcenter.heroku.com/articles/sqlite3&#34; target=&#34;_blank&#34;&gt;some good reasons not to use sqlite&lt;/a&gt;. On heroku, you wouldn&amp;rsquo;t be able to push your application to production if sqlite3 remains in your Gemfile.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>